<?php

/*
 * Implements hook_permission().
 */
function entity_imagestyle_permission() {
  return array(
    'administrate entity imagestyle' => array(
      'title' => t('Administer entity imagestyle settings'),
      'description' => t('Enable or disable entity image styles for different entities and bundles')
    )
  );
}

/*
 * Implements hook_menu().
 */
function entity_imagestyle_menu() {
  $items['admin/config/media/entity-imagestyle'] = array(
    'title' => 'Entity image style settings',
    'description' => 'Enable or disable per-entity image styles for entity types and bundles',
    'access arguments' => array('administrate entity imagestyle'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_imagestyle_admin_form')
  );

  return $items;
}

/*
 * Implements hook_field_formatter_info().
 */
function entity_imagestyle_field_formatter_info() {
  return array(
    'entity_imagestyle' => array(
      'label' => t('Entity image style'),
      'field types' => array('image'),
      'settings' => array('default_imagestyle' => '', 'image_link' => ''),
    ),
  );
}

/*
 * Implements hook_field_formatter_view().
 */
function entity_imagestyle_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  // determine user supplied image style for this entity
  $element = array();
  $settings = $display['settings'];
  $image_styles = entity_imagestyle_imagestyles(FALSE);
  $image_style = entity_imagestyle_load($entity_type, $entity, $field['field_name']);

  // asssess default styles
  if (!$image_style || $image_style == '_default') {
    $image_style = isset($settings['default_imagestyle'])  ? $settings['default_imagestyle'] : reset($image_styles);
  }

  // alter display data, pass "_nostyle" as empty string
  $display['settings']['image_style'] = ($image_style == '_nostyle') ? '' : $image_style;

  if (!isset($display['settings']['image_link'])) {
    $display['settings']['image_link'] = '';
  }

  // reuse formatter hook from image module
  return image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/*
 * Implements hook_field_formatter_settings_form().
 */
function entity_imagestyle_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $options = entity_imagestyle_imagestyles(FALSE);

  $element['default_imagestyle'] = array(
    '#type' => 'select',
    '#title' => t('Default image style'),
    '#description' => t('If user does not select an image style for an entity of this type, specify the fallback'),
    '#options' => $options,
    '#default_value' => isset($settings['default_imagestyle']) ? $settings['default_imagestyle'] : reset($options),
  );

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
  );
  $element['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
  );

  return $element;
}

/*
 * Implements hook_field_attach_form().
 */
function entity_imagestyle_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if (entity_imagestyle_enabled($entity_type, $entity)) {

    // get the correct bundle
    $bundle = entity_imagestyle_entity_bundle($entity_type, $entity);

    // retrieve attached image fields
    $image_fields = entity_imagestyle_image_fields($entity_type, $bundle);

    if (empty($image_fields)) {
      return;
    }

    $form['entity_imagestyle'] = array(
      '#type' => 'container',
      '#tree' => 'TRUE',
      '#attributes' => array(
        'class' => array('entity-imagestyle-controls')
      )
    );

    // create a control for each image field
    foreach ($image_fields as $image_field) {
      $field_name = $image_field['field']['field_name'];
      $form['entity_imagestyle']['imagestyle_' . $field_name] = array(
        '#type' => 'select',
        '#title' => t('Field @field (@field_name) image style', array('@field' => $image_field['instance']['label'], '@field_name' => $field_name)),
        '#options' => entity_imagestyle_imagestyles(),
        '#default_value' => entity_imagestyle_load($entity_type, $entity, $field_name),
        '#tree' => TRUE
      );
    }
  }
}

/*
 * Implements hook_entity_insert().
 */
function entity_imagestyle_entity_insert($entity, $entity_type) {
  if (entity_imagestyle_enabled($entity_type, $entity)) {
    entity_imagestyle_save_all($entity_type, $entity);
  }
}

/*
 * Implements hook_entity_update().
 */
function entity_imagestyle_entity_update($entity, $entity_type) {
  if (entity_imagestyle_enabled($entity_type, $entity)) {
    entity_imagestyle_save_all($entity_type, $entity);
  }
}

/**
 * Saves all imagestyle settings on an entity.
 *
 * @param string $entity_type
 *  Type of entity
 *
 * @param object $entity
 *  Entity of given type. Must have entity_imagestyle property added by the
 *  field attach API.
 *  @see entity_imagestyle_field_attach_form().
 */
function entity_imagestyle_save_all($entity_type, $entity) {
  if (!empty($entity->entity_imagestyle)) {
    foreach ($entity->entity_imagestyle as $field_name => $image_style) {
      $field_name = str_replace('imagestyle_', '', $field_name);
      entity_imagestyle_save($entity_type, $entity, $image_style, $field_name);
    }
  }
}

/*
 * Implements hook_field_formatter_settings_summary().
 */
function entity_imagestyle_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $image_styles = entity_imagestyle_imagestyles(FALSE);
  $default_image_style = (isset($settings['default_imagestyle']) && $settings['default_imagestyle']) ? $settings['default_imagestyle'] : reset($image_styles);

  $summary[] = t('Default image style: @imagestyle', array('@imagestyle' => $default_image_style));

  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
  );

  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }

  return implode('<br/>', $summary);
}

/**
 * Insert or update a entity-imagestyle mapping record
 *
 * @param string $entity_type
 *   Type of entity for mapping
 *
 * @param object $entity
 *   Entity to be used for mapping
 *
 * @param type $image_style
 *   image_style value
 *
 * @param type $field_name
 *   Field that the mapping pertains to
 */
function entity_imagestyle_save($entity_type, $entity, $image_style, $field_name) {

  // determine whether to update or insert
  $keys = entity_imagestyle_load($entity_type, $entity, $field_name) ? array('entity_id', 'entity_type', 'field_name') : array();

  $record = array(
    'entity_id' => entity_id($entity_type, $entity),
    'entity_type' => $entity_type,
    'field_name' => $field_name,
    'image_style' => $image_style
  );

  drupal_write_record('entity_imagestyles', $record, $keys);
}

/**
 * Get bundle name of an entity
 *
 * @param string $entity_type
 *   Type of entity to query
 *
 * @param object $entity
 *   Entity to query
 *
 * @return string
 *   Bundle name
 */
function entity_imagestyle_entity_bundle($entity_type, $entity) {
  $ids = entity_extract_ids($entity_type, $entity);
  return $ids[2];
}

/**
 * Get an option list of available image styles
 *
 * @param boolean $add_default
 *   Add a default option
 *
 * @return array
 *   Option list
 */
function entity_imagestyle_imagestyles($include_default = TRUE) {
  $options = image_style_options(FALSE);

  if ($include_default) {
    $options['_default'] = t('Default');
  }

  // we need a not-null key for "none" option
  $options['_nostyle'] = t('None');

  return $options;
}

/**
 * Load an image style mapping record from the database
 *
 * @param string $entity_type
 *   Entity type property
 *
 * @param object $entity
 *   Entity to load record for
 *
 * @param string $field_name
 *   Field name to load record for
 *
 * @return string
 *   Image style used by entity with specified properties
 */
function entity_imagestyle_load($entity_type, $entity, $field_name) {
  $image_style = db_select('entity_imagestyles', 'ei')
            ->fields('ei', array('image_style'))
            ->condition('entity_id', entity_id($entity_type, $entity))
            ->condition('entity_type', $entity_type)
            ->condition('field_name', $field_name)
            ->execute()
            ->fetchField();

  if (is_string($image_style)) {
    return $image_style;
  }
}

/**
 * Determine whether entity specific image styles are enabled for a certain entity
 * type and bundle
 *
 * @param string $entity_type
 *   Type of entity being checked
 *
 * @param object $entity
 *   Entity being checked
 *
 * @return boolean
 *   TRUE on yes
 */
function entity_imagestyle_enabled($entity_type, $entity) {
  $enabled = variable_get('entity_imagestyle_enabled_bundles', array());

  if (!empty($enabled)) {
    $bundle = entity_imagestyle_entity_bundle($entity_type, $entity);
    
    foreach ($enabled as $type) {
      $type = explode('|', $type);

      if ($entity_type == $type[0]) {

        // determine the string format for the saved configuration
        if (count($type) > 1) {

          if ($bundle == $type[1]) {
            return TRUE;
          }
        }
        else {

          // for single bundle entities
          return TRUE;
        }
      }
    }
  }
}

/**
 * Find all image fields attached to a given entity type and bundle
 *
 * @param string $entity_type
 *   Type of entity to check
 *
 * @param string $bundle
 *   Bundle to check
 *
 * @return array
 *   Keys: field name, with sub-elements
 *     - instance: field-entity instance record
 *     - field: field config record
 */
function entity_imagestyle_image_fields($entity_type, $bundle) {
  $fields = field_read_fields(array('type' => 'image'));
  $instances = field_read_instances(array('bundle' => $bundle, 'entity_type' => $entity_type));
  $return = array();

  foreach ($instances as $instance) {
    $field_name = $instance['field_name'];

    if (array_key_exists($field_name, $fields)) {
      $return[$field_name] = array(
        'instance' => $instance,
        'field' => $fields[$field_name]
      );
    }
  }

  return $return;
}

/*
 * Callback: administrative form
 */
function entity_imagestyle_admin_form() {
  $bundles = array();
  $info = entity_get_info();

  // gather entity types and bundles into form optionset
  foreach ($info as $name => $type) {
    if ($type['fieldable']) {
      if (count($type['bundles']) > 1) {
        foreach ($type['bundles'] as $bundle_name => $bundle) {
          $options[$name][$name . '|' . $bundle_name] = $bundle['label'];
        }
      }
      else {
        $options[$name] = $type['label'];
      }
    }
  }

  // enabled bundles
  $form['entity_imagestyle_enabled_bundles'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => $options,
    '#tree' => TRUE,
    '#title' => t('Enabled bundles'),
    '#description' => t('Enable per-entity image style selection for different bundles and entities'),
    '#default_value' => variable_get('entity_imagestyle_enabled_bundles', array())
  );

  return system_settings_form($form);
}
